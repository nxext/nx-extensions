{
  "$schema": "http://json-schema.org/schema",
  "cli": "nx",
  "$id": "NxextReactApp",
  "title": "Create a React Application for Nxext",
  "examples": [
    {
      "command": "g app myapp --directory=myorg",
      "description": "Generate apps/myorg/myapp"
    },
    {
      "command": "g app myapp --classComponent",
      "description": "Use class components instead of functional components"
    },
    {
      "command": "g app myapp --routing",
      "description": "Set up React Router"
    }
  ],
  "type": "object",
  "properties": {
    "name": {
      "description": "The name of the application.",
      "type": "string",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the application?",
      "pattern": "^[a-zA-Z].*$"
    },
    "directory": {
      "description": "The directory of the new application.",
      "type": "string",
      "alias": "dir"
    },
    "style": {
      "description": "The file extension to be used for style files.",
      "type": "string",
      "default": "css",
      "alias": "s",
      "x-prompt": {
        "message": "Which stylesheet format would you like to use?",
        "type": "list",
        "items": [
          {
            "value": "css",
            "label": "CSS"
          },
          {
            "value": "scss",
            "label": "SASS(.scss)       [ http://sass-lang.com                     ]"
          },
          {
            "value": "styl",
            "label": "Stylus(.styl)     [ http://stylus-lang.com                   ]"
          },
          {
            "value": "less",
            "label": "LESS              [ http://lesscss.org                       ]"
          },
          {
            "value": "styled-components",
            "label": "styled-components [ https://styled-components.com            ]"
          },
          {
            "value": "@emotion/styled",
            "label": "emotion           [ https://emotion.sh                       ]"
          },
          {
            "value": "styled-jsx",
            "label": "styled-jsx        [ https://www.npmjs.com/package/styled-jsx ]"
          },
          {
            "value": "none",
            "label": "None"
          }
        ]
      }
    },
    "linter": {
      "description": "The tool to use for running lint checks.",
      "type": "string",
      "enum": ["eslint", "none"],
      "default": "eslint"
    },
    "routing": {
      "type": "boolean",
      "description": "Generate application with routes.",
      "x-prompt": "Would you like to add React Router to this application?",
      "default": false
    },
    "skipFormat": {
      "description": "Skip formatting files.",
      "type": "boolean",
      "default": false
    },
    "skipWorkspaceJson": {
      "description": "Skip updating workspace.json with default options based on values provided to this app (e.g. babel, style).",
      "type": "boolean",
      "default": false
    },
    "unitTestRunner": {
      "type": "string",
      "enum": ["jest", "none"],
      "description": "Test runner to use for unit tests.",
      "default": "jest"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the application (used for linting).",
      "alias": "t"
    },
    "pascalCaseFiles": {
      "type": "boolean",
      "description": "Use pascal case component file name (e.g. App.tsx).",
      "alias": "P",
      "default": false
    },
    "classComponent": {
      "type": "boolean",
      "description": "Use class components instead of functional component.",
      "alias": "C",
      "default": false
    },
    "js": {
      "type": "boolean",
      "description": "Generate JavaScript files rather than TypeScript files.",
      "default": false
    },
    "globalCss": {
      "type": "boolean",
      "description": "Default is false. When true, the component is generated with *.css/*.scss instead of *.module.css/*.module.scss",
      "default": false
    },
    "strict": {
      "type": "boolean",
      "description": "Creates an application with strict mode and strict type checking",
      "default": true
    },
    "setParserOptionsProject": {
      "type": "boolean",
      "description": "Whether or not to configure the ESLint \"parserOptions.project\" option. We do not do this by default for lint performance reasons.",
      "default": false
    },
    "standaloneConfig": {
      "description": "Split the project configuration into `<projectRoot>/project.json` rather than including it inside workspace.json",
      "type": "boolean"
    }
  },
  "required": []
}
